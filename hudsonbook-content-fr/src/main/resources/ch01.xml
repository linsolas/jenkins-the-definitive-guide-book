<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="intro">
  <title>Introduction à Jenkins</title>
  <sect1 id="I_sect11_d1e536">
    <title>Introduction</title>
    <para>L'intégration continue, aussi connue sous le nom d'<indexterm class="startofrange" id="ch01-ci" significance="normal"><primary>IC (Intégration Continue)</primary></indexterm><indexterm id="I_indexterm1_d1e544" significance="normal"><primary>Intégration Continue</primary><see>IC</see></indexterm>IC, est une pierre angulaire du développement logiciel moderne.
    En réalité, elle a redistribué les cartes - quand l'intégration continue est introduite dans une organisation, cela change radicalement la façon dont les équipes pensent le processus global de développement.
    Elle a le potentiel d'activer et déclencher une série d'améliorations incrémentales, allant du simple ordonnancement de build automatisé jusqu'à la livraison en continu en production.
    Une bonne infrastructure d'intégration continue permet de rationnaliser le processus de développement jusqu'au déploiement, d'aider à détecter des défauts et les corriger plus rapidement, propose un tableau de bord fonctionnel à la fois pour les développeurs et les non développeurs, et enfin, permet aux équipes de délivrer plus de valeur métier aux utilisateurs finaux.
    Toute équipe de développement professionnel, quelque soit sa taille, se doit de pratiquer l'intégration continue.</para>
  </sect1>
  <sect1 id="intro-sect-intro">
    <title>Les fondamentaux de l'intégration continue</title>
    <para>À l'époque des projets développés selon le cycle en V (ou en cascade), avec les graphiques Gannt, avant l'introduction des pratiques de l'intégration continue, le temps et l'énergie des équipes de développement étaient régulièrement dilapidés lors des périodes précédant une livraison durant ce que l'on a coutume d'appeler la phase d'intégration.
    Lors de cette phase, les modifications de code réalisés individuellement par les développeurs ou par de petites équipes étaient assemblées au sein d'un produit fonctionnel. Il s'agissait là d'un travail complexe, impliquant souvent l'intégration des mois de modifications conflictuelles.
    Il était très complexe d'anticiper les types de problèmes qui pouvaient surgir, et plus difficile encore de les corriger, car cela nécessitait de retravailler un code écrit plusieurs semaines ou mois auparavant.
    De ce processus douloureux, semé d'embûches et de dangers, résultait souvent des décalages importants de livraison, des coûts inattendus, et, au final, des clients mécontents.
    L'intégration continue est née pour résoudre ces problèmes.</para>
    <para>L'intégration continue, dans sa forme la plus simple, implique un outil qui traque les modifiction sur votre gestionnaire de versions. Dès lors qu'une modification est détectée, cet outil va automatiquement compiler et tester votre application. Si quelque chose se passe mal, l'outil va immédiatement notifier les développeurs, de telle façon qu'ils seront à même de corriger l'erreur sans délai.</para>
    <para>Cependant, l'intégration continue peut faire bien plus que cela. L'intégration continue peut vous aider à garder un œil sur la santé de votre base de code, surveiller automatiquement la qualité du code, ainsi que des mesures de couverture de ce dernier, mais également aider à conserver une dette technique et des coûts de maintenance faibles.
    La visibilité publique des mesures de qualité du code va également encourager les développeurs à être fiers de la qualité de leur code et s'efforceront à l'améliorer encore d'avantage.
    Combinée à un système de tests d'acceptation, l'intégration continue peut aussi servir d'outil de communication, en publiant une vision claire de l'état actuel des efforts de développement. Elle simplifie et accélère la livraison en facilitant l'automatisation du processus de déploiement, permettant de déployer la dernière version de votre application, que ce soit automatiquement ou encore à la demande.</para>
    <para>En substance, l'intégration continue vise à réduire le risque en fournissant un feed-back plus rapide. D'abord et avant tout, il est destiné à identifier et fixer les problèmes d'intégration et de régressions plus rapidement, résultant une livraison plus rapide, plus fluide, et moins bugguée. En fournissant une meilleure visibilité sur l'état du projet à la fois pour les équipes techniques et non techniques, l'intégration continue peut faciliter la communication entre les membres d'une équipe, et encourager la résolution collaborative des problèmes, ainsi que l'améliorations des processus. De plus, grâce à l'automatisation du processus de déploiement, l'intégration continue va mettre plus rapidement votre application entre les mains des testeurs et des utilisateurs finaux, de façon également plus sûre, et à moindre effort.</para>
    <para>Cette idée du déploiement automatisé est importante. En effet, si vous amenez l'automatisation du processus de déploiement à sa conclusion logique, vous pourrez alors pousser n'importe quel build en production, pour peu qu'il ait passé avec succès les tests automatisés requis. La pratique consistant à déployer automatiquement en production chaque build réussi est généralement connue sous le nom de <indexterm id="I_indexterm1_d1e563" significance="normal"><primary>déploiement continu</primary></indexterm> <emphasis>Déploiement <phrase role="keep-together">Continu</phrase></emphasis>.</para>
    <para>Toutefois, une approche pure du déploiement continu n'est pas toujours approprié pour chacun. Par exemple, de nombreux utilisateurs ne souhaitent pas voir apparaitre plusieurs nouvelles versions chaque semaine, et se sentiront plus à l'aise avec un cycle de livraison plus prévisible (et transparent). Des considérations commerciales peuvent également jouer un rôle sur la décision de déployer ou non une nouvelle version.</para>
    <para>La notion de <emphasis><indexterm id="I_indexterm1_d1e577" significance="normal"><primary>livraison continue</primary></indexterm>Livraison Continue</emphasis> est une légère variation de l'idée de déploiement continu qui prend en compte ces considérations. Avec la livraison continue, chacun des builds construits avec succès et ayant passé tous les tests et les portes de sécurité peut <emphasis>potentiellement</emphasis> être déployé en production à travers un <phrase role="keep-together">processus</phrase> automatique en un clic, et ainsi être mis entre les mains des utilisateurs finaux en l'espace de quelques minutes. Toutefois, le processus n'est pas automatique : c'est le métier, plutôt que la technique, qui décide du meilleur moment de la livraison des dernières modifications.</para>
    <?dbfo-need height=”1in”?>
    <para>Les techniques de l'intégration continue, en particulier le déploiement et la livraison continus, sont étroitement liées au fait de fournir plus rapidement de la valeur au client final. Combien de temps faut-il à votre équipe pour délivrer en production une petite modification de code ? Durant ce processus, combien de problèmes vont apparaitre, alors qu'ils auraient pu être fixés plus tt ? Étiez-vous au courant de cette modification que Joe a faite dans le code ? Combien de temps perdu par les tests manuels et laborieux réalisés par les équipes qualité ? Combien d'étapes manuelles, de secrets détenus par une poignée de personnes ?
    L'intégration continue n'est pas un remède miracle, mais elle peut certainement résoudre une partie de ces problèmes.</para>
    <para>Cependant, l'intégration continue est autant un état d'esprit qu'un outil. Afin de tirer le meilleur de l'intégration continue, une équipe a besoin de l'adopter mentalement. Par exemple, vos projets doivent être fiables, répétables, construits selon un processus automatisé, et n'impliquer aucune intervention humaine. La résolution des builds échoués doit être considérée comme une priorité absolue, et ne doit pas être laissée à l'abandon. Le processus de déploiement doit être automatisé, et sans intervention humaine. Et comme la confiance que vous placez dans votre système d'intégration continue dépend fortement de la qualité de vos tests, l'équipe doit mettre l'accent sur l'écriture de tests de qualité, ainsi que la mise en place de bonnes pratiques de tests.</para>
    <para>Dans cet ouvrage, nous verrons comment implémenter une solution robuste et complète d'intégration continue en utilisant Jenkins<indexterm id="I_indexterm1_d1e596" class="endofrange" startref="ch01-ci" significance="normal"><primary/></indexterm> ou Hudson.</para>
  </sect1>
  <sect1 id="intro-sect-introducing-jenkins">
    <title>Introducing Jenkins (née Hudson)</title>
    <para>Jenkins, <indexterm class="startofrange" id="ch01-jenkins" significance="normal"><primary>Jenkins</primary></indexterm>originally called <indexterm id="I_indexterm1_d1e608" significance="normal"><primary>Hudson</primary><seealso>Jenkins</seealso></indexterm>Hudson, is an open source Continuous Integration tool
    written in Java. Boasting a dominant market share, Jenkins is used by
    teams of all sizes, for projects in a wide variety of languages and
    technologies, including .NET, Ruby, Groovy, Grails, PHP and more, as well
    as Java. So what has made Jenkins such a success? And why use Jenkins for
    your CI infrastructure?</para>
    <para>Firstly, Jenkins is easy to use. The user interface is simple,
    intuitive, and visually appealing, and Jenkins as a whole has a very low
    learning curve. As we will see in the next chapter, you can get started
    with Jenkins in a matter of minutes.</para>
    <para>However Jenkins does not sacrifice power or extensibility: it is
    also extremely flexible and easy to adapt to your own purposes. Hundreds
    of open source plugins are available, with more coming out every week.
    These plugins cover everything from version control systems, build tools,
    code quality metrics, build notifiers, integration with external systems,
    UI customization, games, and much more. And installing them is quick and
    easy.</para>
    <para>Last, but certainly not least, much of Jenkins’s popularity comes
    from the size <phrase role="keep-together">and</phrase> vibrancy of its
    community. The Jenkins community is a large, dynamic, reactive <phrase role="keep-together">and welcoming</phrase> bunch, with passionate
    champions, active mailing lists, IRC channels and a very vocal blog and
    twitter account. The development pace is fast, with releases coming out
    weekly with the latest new features, bug fixes, and plugin updates.</para>
    <para>However Jenkins also caters to users who are not comfortable with
    upgrading on a weekly basis. For those who prefer a less-hectic release
    pace, there is also a Long-term Support, or <indexterm id="I_indexterm1_d1e628" significance="normal"><primary>LTS (Long-Term Support) releases</primary></indexterm>LTS, release line that lags behind the latest release in
    favor of more stability and a slower rate of change. New LTS releases come
    out every three months or so, with important bug fixes being backported.
    This concept is similar to the Ubuntu LTS <phrase role="keep-together">releases</phrase>.</para>
  </sect1>
  <sect1 id="intro-sect-history">
    <title>From Hudson to Jenkins—A Short History</title>
    <para>Jenkins<indexterm class="startofrange" id="ch01-history" significance="normal"><primary>Jenkins</primary><secondary>history of</secondary></indexterm> is the result of one visionary developer, <indexterm id="I_indexterm1_d1e646" significance="normal"><primary>Kawaguchi, Kohsuke (developer of Hudson)</primary></indexterm>Kohsuke Kawaguchi, who started the project as a hobby
    project under the name of <indexterm id="I_indexterm1_d1e650" significance="normal"><primary>Hudson</primary></indexterm>Hudson in late 2004 whilst working at Sun. As Hudson evolved
    over the years, it was adopted by more and more teams within Sun for their
    own projects. By early 2008, Sun recognized the quality and value of the
    tool, and ask Kohsuke to work on Hudson full-time, starting to provide
    professional services and support around Hudson. By 2010, Hudson had
    become the leading Continuous Integration solution with a market share of
    over 70%.</para>
    <para>In 2009, Oracle purchased Sun. Towards the end of 2010, tensions
    arose between the Hudson developer community and Oracle, initially
    triggered by problems with the Java.net infrastructure, and aggravated by
    issues related to Oracle’s claim to the Hudson trademark. These tensions
    also reflected strong underlying disagreements about the way the project
    was being managed by Oracle. Indeed, Oracle wanted to move towards a more
    strictly controlled development process with a slower release schedule,
    whereas most of the core Hudson developers, led by Kohsuke, preferred to
    continue with the open, flexible, and fast-paced community-focused model
    that had worked so well for Hudson in the past.</para>
    <para>In January 2011, the Hudson developer community decisively voted to
    rename the project to Jenkins. They subsequently migrated the original
    Hudson code base to a new <indexterm id="I_indexterm1_d1e658" significance="normal"><primary>GitHub project</primary></indexterm><ulink url="https://github.com/jenkinsci">GitHub
    project</ulink> and continued their work there. The vast majority of core
    and plugin developers upped camp and followed Kohsuke Kawaguchi and other
    core contributors to the Jenkins camp, where the bulk of the development
    activity can be seen today.</para>
    <para>After the fork, a majority of users also followed the Jenkins
    developer community and switched to Jenkins. At the time of writing, polls
    show that some 75% of Hudson users had switched to Jenkins, while 13% were
    still using Hudson, and another 12% were using both Hudson and Jenkins or
    in the process of migrating to Jenkins.</para>
    <para>Nevertheless, Oracle and Sonatype (the company behind Maven and
    Nexus) have continued to work on the Hudson code base (now also hosted on
    GitHub at <ulink url="https://github.com/hudson"/>), but with a
    very different focus. Indeed, the <indexterm id="I_indexterm1_d1e670" significance="normal"><primary>Sonatype tools</primary></indexterm>Sonatype developers have concentrating on major underlying
    infrastructure changes around, among other areas, Maven integration, the
    dependency injection framework and the plugin <indexterm id="I_indexterm1_d1e674" class="endofrange" startref="ch01-jenkins" significance="normal"><primary/></indexterm><indexterm id="I_indexterm1_d1e676" class="endofrange" startref="ch01-history" significance="normal"><primary/></indexterm>architecture.</para>
  </sect1>
  <sect1 id="intro-sect-jenkins-or-hudson">
    <title>Should I Use Jenkins or Hudson?</title>
    <para>So should<indexterm id="I_indexterm1_d1e684" significance="normal"><primary>Jenkins</primary><secondary>reasons to use</secondary></indexterm> you use Jenkins or Hudson? Since this is a book on Jenkins,
    here are a few reasons why you might want to opt for Jenkins:</para>
    <itemizedlist>
      <listitem>
        <para><emphasis>Jenkins is the new Hudson.</emphasis> In fact, Jenkins
        is simply the old Hudson with a new name, so if you liked Hudson,
        you’ll like Jenkins! Jenkins uses the Hudson code base, and the
        development team and project philosophy remain the same. In a
        nutshell, the original developers, who wrote the vast majority of the
        Hudson core, simply resumed business as usual after the fork working
        on the Jenkins project.</para>
      </listitem>
      <listitem>
        <para><emphasis>The Jenkins <indexterm id="I_indexterm1_d1e700" significance="normal"><primary>Jenkins</primary><secondary>community for</secondary></indexterm>community</emphasis>. Like many of the more successful
        <indexterm id="I_indexterm1_d1e707" significance="normal"><primary>Jenkins</primary><secondary sortas="Open Source">as Open Source project</secondary></indexterm>Open Source projects, much of Hudson’s strength came
        from its large and dynamic community, and its massive adoption. Bugs
        are identified (and generally fixed) much more rapidly, and, if you
        have a problem, chances are someone else will have had it too! If you
        run into trouble, post a question on the mailing list or IRC
        channel—there’s sure to be someone who can help.</para>
      </listitem>
      <listitem>
        <para><emphasis>The fast <indexterm id="I_indexterm1_d1e717" significance="normal"><primary>Jenkins</primary><secondary>rapid release cycle of</secondary></indexterm>development pace</emphasis>. Jenkins continues the rapid
        release cycles that typified Hudson, which many developers love. New
        features, new plugins and bug fixes come out weekly, and the
        turn-around time for bug fixes can be very short indeed. And, if you
        prefer more stability, there are always the LTS releases</para>
      </listitem>
    </itemizedlist>
    <para>And, <indexterm id="I_indexterm1_d1e726" significance="normal"><primary>Hudson</primary></indexterm>in the interest of balance, here are some reasons you might
    prefer to stick with Hudson:</para>
    <itemizedlist>
      <listitem>
        <para><emphasis>If it ain’t broke, don’t fix it.</emphasis> You
        already have a Hudson installation that you are happy with, and don’t
        feel the need to upgrade to the latest version.</para>
      </listitem>
      <listitem>
        <para><emphasis>Enterprise integration and <indexterm id="I_indexterm1_d1e740" significance="normal"><primary>Sonatype tools</primary></indexterm>Sonatype tools.</emphasis> Hudson is likely to place a
        strong emphasis on integration with enterprise tools such as
        <indexterm id="I_indexterm1_d1e745" significance="normal"><primary>LDAP/Active Directory</primary></indexterm>LDAP/Active Directory, and the Sonatype products such as
        <indexterm id="I_indexterm1_d1e749" significance="normal"><primary>Maven</primary><secondary>Hudson support for</secondary></indexterm>Maven 3, <indexterm id="I_indexterm1_d1e755" significance="normal"><primary>Nexus</primary><secondary>Hudson support for</secondary></indexterm>Nexus and <indexterm id="I_indexterm1_d1e761" significance="normal"><primary>M2Eclipse</primary></indexterm>M2Ecipse, whereas Jenkins is more open to other
        competing tools such as <indexterm id="I_indexterm1_d1e765" significance="normal"><primary>Artifactory</primary><secondary>Jenkins support for</secondary></indexterm>Artifactory and <indexterm id="I_indexterm1_d1e772" significance="normal"><primary>Gradle</primary><secondary>Jenkins support for</secondary></indexterm>Gradle.</para>
      </listitem>
      <listitem>
        <para><emphasis>Plugin <indexterm id="I_indexterm1_d1e782" significance="normal"><primary>plugins</primary><secondary>architecture of, Jenkins compared to Hudson</secondary></indexterm>architecture.</emphasis> If you intend to write your own
        Jenkins/Hudson plugins, you should be aware that Sonatype is working
        on providing JSR-330 dependency injection for Hudson plugins. New
        developers may find this approach easier to use, though it does raise
        issues about future plugin compatibility between Jenkins and
        Hudson.</para>
      </listitem>
    </itemizedlist>
    <para>The good news is, no matter whether you are using Jenkins or Hudson,
    the products remain very similar, and the vast majority of techniques and
    tips discussed in this book will apply equally well to both. Indeed, to
    illustrate this point, many screenshots in this book refer to Hudson
    rather than Jenkins.</para>
  </sect1>
  <sect1 id="intro-sect-your-organization">
    <title>Introducing Continuous Integration into Your Organization</title>
    <para>Continuous Integration<indexterm class="startofrange" id="ch01-phases" significance="normal"><primary>CI (Continuous Integration)</primary></indexterm> is not an all-or-nothing affair. In fact, introducing CI
    into an organization takes you on a path that progresses through several
    distinct phases. Each of these phases involves incremental improvements to
    the technical infrastructure as well as, perhaps more importantly,
    improvements in the practices and culture of the development team itself.
    In the following paragraphs, I have tried to paint an approximate picture
    of each phase.</para>
    <sect2>
      <title>Phase 1—No Build Server</title>
      <para>Initially, the team has no central <indexterm id="I_indexterm1_d1e805" significance="normal"><primary>build server</primary></indexterm>build server of any kind. Software is built manually on a
      developer’s machine, though it may use an Ant script or similar to do
      so. Source code may be stored in a central source code repository, but
      developers do not necessarily commit their changes on a regular basis.
      Some time before a release is scheduled, a developer manually integrates
      the changes, a process which is generally associated with pain and
      suffering.</para>
    </sect2>
    <sect2>
      <title>Phase 2—Nightly Builds</title>
      <para>In this phase, the team has a build server, and <indexterm id="I_indexterm1_d1e814" significance="normal"><primary>automated nightly builds</primary></indexterm><indexterm id="I_indexterm1_d1e817" significance="normal"><primary>nightly builds</primary><see>automated nightly builds</see></indexterm>automated builds are scheduled on a regular (typically
      nightly) basis. This build simply compiles the code, as there are no
      reliable or repeatable unit tests. Indeed, automated tests, if they are
      written, are not a mandatory part of the build process, and may well not
      run correctly at all. However developers now commit their changes
      regularly, at least at the end of every day. If a developer commits code
      changes that conflict with another developer’s work, the build server
      alerts the team via email the following morning. Nevertheless, the team
      still tends to use the build server for information purposes only—they
      feel little obligation to fix a broken build immediately, and builds may
      stay broken on the build server for some time.</para>
    </sect2>
    <sect2>
      <title>Phase 3—Nightly Builds and Basic Automated Tests</title>
      <para>The team<indexterm id="I_indexterm1_d1e828" significance="normal"><primary>tests</primary><secondary>automating</secondary></indexterm> is now starting to take Continuous Integration and
      automated testing more seriously. The build server is configured to kick
      off a build whenever new code is committed to the version control
      system, and team members are able to easily see what changes in the
      source code triggered a particular build, and what issues these changes
      address. In addition, the build script compiles the application and runs
      a set of automated unit and/or integration tests. In addition to email,
      the build server also alerts team members of integration issues using
      more proactive channels such as Instant Messaging. Broken builds are now
      generally fixed quickly.</para>
    </sect2>
    <sect2>
      <title>Phase 4—Enter the Metrics</title>
      <para>Automated <indexterm id="I_indexterm1_d1e839" significance="normal"><primary>code quality metrics</primary></indexterm><indexterm id="I_indexterm1_d1e842" significance="normal"><primary>code coverage metrics</primary></indexterm><indexterm id="I_indexterm1_d1e845" significance="normal"><primary>metrics</primary><see>reporting</see></indexterm><indexterm id="I_indexterm1_d1e850" significance="normal"><primary>reporting</primary><secondary>code coverage metrics</secondary></indexterm><indexterm id="I_indexterm1_d1e855" significance="normal"><primary>reporting</primary><secondary>code quality metrics</secondary></indexterm>code quality and code coverage metrics are now run to help
      evaluate the quality of the code base and (to some extent, at least) the
      relevance and effectiveness of the tests. The code quality build also
      automatically generates API documentation for the application. All this
      helps teams keep the quality of the code base high, alerting team
      members if good testing practices are slipping. The team has also set up
      a “build radiator,” a dashboard view of the project status that is
      displayed on a prominent screen visible to all team members.</para>
    </sect2>
    <sect2>
      <title>Phase 5—Getting More Serious About Testing</title>
      <para>The <indexterm id="I_indexterm1_d1e866" significance="normal"><primary>Test-Driven development</primary></indexterm><indexterm id="I_indexterm1_d1e869" significance="normal"><primary>tests</primary><secondary>Test-Driven development</secondary></indexterm>benefits of Continuous Integration are closely related to
      solid testing practices. Now, practices like Test-Driven Development are
      more widely practiced, resulting in a growing confidence in the results
      of the automated builds. The application is no longer simply compiled
      and tested, but if the tests pass, it is automatically deployed to an
      application server for more comprehensive end-to-end tests and
      performance tests.</para>
    </sect2>
    <sect2>
      <title>Phase 6—Automated Acceptance Tests and More Automated <phrase role="keep-together">Deployment</phrase></title>
      <para>Acceptance-Test Driven Development<indexterm id="I_indexterm1_d1e882" significance="normal"><primary>acceptance tests, automated</primary></indexterm><indexterm id="I_indexterm1_d1e885" significance="normal"><primary>Acceptance-Test Driven Development</primary></indexterm><indexterm id="I_indexterm1_d1e888" significance="normal"><primary>tests</primary><secondary>acceptance tests</secondary></indexterm><indexterm id="I_indexterm1_d1e893" significance="normal"><primary>tests</primary><secondary>automating</secondary></indexterm><indexterm id="I_indexterm1_d1e898" significance="normal"><primary>automated tests</primary><see>tests</see></indexterm> is practiced, guiding development efforts and providing
      high-level reporting on the state of the project. These automated tests
      use Behavior-Driven Development and Acceptance-Test Driven Development
      tools to act as communication and documentation tools and documentation
      as much as testing tools, publishing reports on test results in business
      terms that non-developers can understand. Since these high-level tests
      are automated at an early stage in the development process, they also
      provide a clear idea of what features have been implemented, and which
      remain to be done. The application is automatically deployed into test
      environments for testing by the QA team either as changes are committed,
      or on a nightly basis; a version can be deployed (or “promoted”) to UAT
      and possibly production environments using a manually-triggered build
      when testers consider it ready. The team is also capable of using the
      build server to back out a release, rolling back to a previous release,
      if something goes horribly wrong.</para>
    </sect2>
    <sect2>
      <title>Phase 7—Continuous Deployment</title>
      <para>Confidence<indexterm id="I_indexterm1_d1e909" significance="normal"><primary>continuous deployment</primary></indexterm> in the automated unit, integration and acceptance tests
      is now such that teams can apply the automated deployment techniques
      developed in the previous phase to push out new changes directly into
      production.</para>
      <?dbfo-need height=”1in”?>
      <para>The progression between levels here is of course somewhat
      approximate, and may not always match real-world situations. For
      example, you may well introduce automated web tests before integrating
      code quality and code coverage reporting. However, it should give a
      general idea of how implementing a Continuous Integration strategy in a
      real world organization generally<indexterm id="I_indexterm1_d1e916" class="endofrange" startref="ch01-phases" significance="normal"><primary/></indexterm> works.</para>
    </sect2>
  </sect1>
  <sect1 id="I_sect11_d1e919">
    <title>Where to Now?</title>
    <para>Throughout the remainder of this book, as we study the various
    features Jenkins has to offer, as well as the practices required to make
    the most of these features, we will see how we can progress through each
    of these levels with Jenkins. And remember, most of the examples used in
    the book are available online (see <ulink url="http://www.wakaleo.com/books/jenkins-the-definitive-guide"/>
    for more details), so you can get your hands dirty too!</para>
  </sect1>
</chapter>
